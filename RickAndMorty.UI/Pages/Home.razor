@page "/"
@using RickAndMorty.UI.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<h1>Rick and Morty</h1>

@if (characters == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <a class="btn btn-primary mb-3" href="/character">New Character</a>
    <div class="d-flex">
        <!-- Align pagination to the right -->
        <nav class="ms-auto">
            <ul class="pagination">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="GoToPreviousPage">Previous</button>
                </li>
                <li class="page-item @(CurrentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="GoToNextPage">Next</button>
                </li>
            </ul>
        </nav>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Status</th>
                <th>Species</th>
                <th>Type</th>
                <th>Gender</th>
                <th>Origin</th>
                <th>Location</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @if (!paginatedCharacters.Any())
            {
                <tr>
                    <td colspan="9" class="text-center">No data available</td>
                </tr>
            }
            else
            {
                @foreach (var character in paginatedCharacters)
                {
                    <tr>
                        <td>@character.Id</td>
                        <td>@character.Name</td>
                        <td>@character.Status</td>
                        <td>@character.Species</td>
                        <td>@character.Type</td>
                        <td>@character.Gender</td>
                        <td @onclick="() => NavigateToOrigin(character.Origin)" class="@(character.Origin?.Type == PlanetType ? "link-style" : "")"
                            style="cursor: @(character.Origin?.Type == PlanetType ? "pointer" : "default");">

                            @if (character.Origin is null || string.IsNullOrEmpty(character.Origin.Name))
                            {
                                <span>No origin available</span>
                            }
                            else if (character.Origin.Type == PlanetType)
                            {
                                <span>@character.Origin.Name</span>
                            }
                            else
                            {
                                <span>@character.Origin.Name (Not a planet)</span>
                            }
                        </td>
                        <td>@character.Location?.Name</td>
                        <td><img src="@character.Image" style="max-width: 60px; border-radius:50%" class="img-fluid" /></td>
                    </tr>
                }
            }
        </tbody>
    </table>

  
}

@code {
    private List<CharacterRead>? characters;
    private List<CharacterRead> paginatedCharacters = new();
    private const string PlanetType = "Planet";
    private string apiBaseUrl;
    private int CurrentPage = 1;
    private int pageSize = 20;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        characters = await Http.GetFromJsonAsync<List<CharacterRead>>($"{apiBaseUrl}/Characters");
        totalPages = (int)Math.Ceiling(characters.Count / (double)pageSize);
        PaginateCharacters();
    }

    private void PaginateCharacters()
    {

        paginatedCharacters = characters
            .Skip((CurrentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void GoToPreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            PaginateCharacters();
        }
    }

    private void GoToNextPage()
    {
        if (CurrentPage < totalPages)
        {
            CurrentPage++;
            PaginateCharacters();
        }
    }

    private void NavigateToOrigin(Location origin)
    {
        if (origin.Type != PlanetType) return;

        if (origin is not null && !string.IsNullOrEmpty(origin.Name))
        {
            var encodedOriginName = origin.Name.Replace(" ", "").ToLower();
            Navigation.NavigateTo($"/character/{encodedOriginName}");
        }
    }
}

<style>
    .link-style {
        color: #007bff;
        text-decoration: underline;
        cursor: pointer;
    }

        .link-style:hover {
            text-decoration: none;
            color: #0056b3; 
        }
</style>